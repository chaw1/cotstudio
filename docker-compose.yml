# Removed obsolete version attribute

services:
  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cot-network
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - DOCKER_ENV=true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://0.0.0.0:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://cotuser:cotpass@postgres:5432/cotdb
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4jpass
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - RABBITMQ_URL=amqp://cotuser:cotpass@rabbitmq:5672/
      - MINERU_SERVICE_URL=http://mineru:8001
      - DEBUG=true
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - NO_PROXY=mineru,localhost,127.0.0.1,postgres,redis,neo4j,minio,rabbitmq
      - no_proxy=mineru,localhost,127.0.0.1,postgres,redis,neo4j,minio,rabbitmq
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mineru:
        condition: service_healthy
    # GPU支持 - 用于监控GPU状态
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, utility]
    volumes:
      - ./backend:/app
      - ./mineru:/app/mineru
    networks:
      - cot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MinerU OCR服务 (GPU加速的PDF文档解析)
  mineru:
    build:
      context: ./docker/mineru
      dockerfile: Dockerfile.minimal  # 最简化版本,仅依赖pip
    command: python /app/mineru_service.py
    ports:
      - "8001:8001"
    environment:
      - HOST=0.0.0.0
      - PORT=8001
      - CUDA_VISIBLE_DEVICES=0
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - http_proxy=
      - https_proxy=
      - NO_PROXY=*
      - no_proxy=*
    volumes:
      - mineru_models:/app/models
      - mineru_temp:/app/temp
      - mineru_output:/app/output
      - ./docker/mineru/mineru_service.py:/app/mineru_service.py  # 开发时挂载源代码
    networks:
      - cot-network
    restart: unless-stopped
    # GPU支持 (如果有NVIDIA GPU)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s  # MinerU启动需要更长时间

  # Celery异步任务处理器
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.worker worker --loglevel=info --concurrency=2 -Q celery,ocr,llm,kg
    environment:
      - DATABASE_URL=postgresql://cotuser:cotpass@postgres:5432/cotdb
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4jpass
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - RABBITMQ_URL=amqp://cotuser:cotpass@rabbitmq:5672/
      - MINERU_SERVICE_URL=http://mineru:8001
      - NO_PROXY=mineru,localhost,127.0.0.1,postgres,redis,neo4j,minio,rabbitmq
      - no_proxy=mineru,localhost,127.0.0.1,postgres,redis,neo4j,minio,rabbitmq
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./mineru:/app/mineru
    networks:
      - cot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "app.worker", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Beat 定时任务调度器
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.worker beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://cotuser:cotpass@postgres:5432/cotdb
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4jpass
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - RABBITMQ_URL=amqp://cotuser:cotpass@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - cot-network
    restart: unless-stopped

  # Flower - Celery监控界面
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.worker flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://cotuser:cotpass@postgres:5432/cotdb
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://cotuser:cotpass@rabbitmq:5672/
    depends_on:
      - redis
      - rabbitmq
    networks:
      - cot-network
    restart: unless-stopped

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: cotdb
      POSTGRES_USER: cotuser
      POSTGRES_PASSWORD: cotpass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cotuser -d cotdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Neo4j图数据库
  neo4j:
    image: neo4j:5.25-community
    environment:
      NEO4J_AUTH: neo4j/neo4jpass
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - cot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "neo4jpass", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # MinIO对象存储
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - cot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: cotuser
      RABBITMQ_DEFAULT_PASS: cotpass
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - cot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  redis_data:
  minio_data:
  rabbitmq_data:
  mineru_models:    # MinerU模型文件存储
  mineru_temp:      # MinerU临时文件
  mineru_output:    # MinerU输出文件

networks:
  cot-network:
    driver: bridge